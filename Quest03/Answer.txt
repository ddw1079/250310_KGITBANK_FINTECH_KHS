(3) 자바 문법 중 배열과 컬렉션차이에 대해 조사하여 작성하고 컬렉션의 종류 및 특징에 대해 상세하게 작성

배열:고정된 크기/이후 크기 변경 불가능
    동일한 타입요소만 저장 가능
    인덱스 통한 직접 접근
    저수준 데이터 구조: 메모리 효율성과 빠른 접근속도 제공.

(길이 조절을 하고싶다면 새로운 배열을 할당하여 넣어주는 방법.)
(배열은 객체로 heap 메모리에 저장.)

컬렉션: 가변 크기/ 동적으로 크기조절가능
      다양한 데이터 구조: 리스트, 셋, 앱,큐 등 다양한 데이터구조 제공
      (제네릭스 사용) 다양한 타입요소 저장 가능
      편리한 메서드 제공(요소 추가,삭제,검색 등)
      고수준 데이터 구조 : 높은 수준의 추상화와 다양한 기능 제공 


>>배열과 컬렉션의 차이점
-크기 : 배열은 고정크기/ 컬렉션은 크기 변경가능
-성능 : 배열은 인덱스로 빠른 접근 / 컬렉션은 추가기능 제공 대신 성능 다소 떨어짐.
-데이터 타입 : 배열은 기본 데이터 타입(예:int,char)저장 가능/컬렉션은 객체(참조형 타입)만 저장 가능.

<컬렉션의 종류 및 특징>
자바 컬렉션 프레임 워크의 주요 인터페이스로는 List,Set,Map,Queue

List : 순서가 있는 데이터의 집합으로 중복값 허용.
Set : 순서가 없는 데이터의 집합으로 중복을 허용하지 않음.
Map : 키-값 쌍으로 이루어진 데이터의 집합으로 키는 중복될 수 없고, 값은 중복이 가능
Queue : FIFO구조로, 먼저 입력된 값이 먼저 나옴.


List
-ArrayList : 동적배열로 빠른 조회 가능
-LinkedList : 이중 연결리스트로 빠른 삽입/삭제 가능
-Vector : ArrayList와 유사, thread-safe

Set
-HashSet : 해시 기반 빠른 검색
-LinkedHashSet : HashSet의 기능에 삽입 순서 유지(Set의 구현체이면서 동시에 HashSet을 상속)
-TreeSet : 레드-블랙트리 기반 정렬 상태 유지

Map
-HashMap : 해시 기반 빠른 검색
-LinkedHashMap : 삽입 순서 유지하는 HashMap
-TreeMap : 오름차순으로 정렬되며 넣어짐.


Queue
PriorityQueue: 우선순위를 두어 요소 정렬
LinkedList: Queue의 인터페이스 구현체

<컬렉션 프레임 워크 특징>

요구사항에 따라 필요한 자료구조를 바로 사용할 수 있다.
각 인터페이스는 용도에 따라 최적화된 알고리즘으로 구현되어 있어 높은 성능 제공, 일관된  API사용으로 재사용성을 높일 수 있음.
제네릭 사용으로 타입 안정성 보장.
컬렉션 프레임워크는 크기가 가변적으로 변경 가능.
삽입, 탐색, 정렬 등이 유연하게 가능하고, 용도에 따라 연속적/비연속적으로 주솟값을 사용하므로 효율적인 메모리 관리가 가능.
